package csc316project3;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

public class Boruvka {
	private Graph graph;
	private String outputFile;
	
	/**
	 * Constructor
	 * @param outputFile file to print the mst graph in
	 */
	public Boruvka(String outputFile) {
		this.outputFile = outputFile;
	}
	
	/**
	 * Initializes the graph with v vertices and returns it
	 * @param v number of vertices in the graph
	 * @return the empty graph with v vertices
	 */
	public int setGraph(int v){
		this.graph = new Graph(v);
		return v;
	}

	/**
	 * Getter for the graph member
	 * @return graph created from input file
	 */
	public Graph getGraph() {
		return this.graph;
	}
	
	/**
	 * Sets the number of edges in the graph member
	 * @param e number of edges
	 * @return the number of edges
	 */
	public int setNumEdges(int e) {
		graph.setNumEdges(e);
		return e;
	}
	
	/**
	 * Returns a string representation of the Prim object
	 */
	public String toString() {
		String s = "";
		s += "c MST generated by Boruvka's Algotirhm\n";
		s += graph;
		return s;
	}

	/**
	 * Runs Boruvka's algorithm to create a mst from a graph
	 * @param args
	 */
	public static void main(String[] args) {
		if (args.length == 2) {
			String filename = args[0];		// graph.gph
			String outputFile = args[1];
			
			try {
				FileReader file = new FileReader(filename);
				Scanner input = new Scanner(file);		// file scanner
				String line;
				String token;							// holds tokens temporarily
				Boruvka boruvka = new Boruvka(outputFile);

				while (input.hasNextLine()) {
					line = input.nextLine();		// scans in line from graph.gph
					Scanner lineScanner = new Scanner(line);
					lineScanner.useDelimiter(" ");
					while (lineScanner.hasNext()) {
						token = lineScanner.next();
						if (token.equalsIgnoreCase("c")) {
							break; // skip line
						} else if (token.equalsIgnoreCase("g")) {
							boruvka.setGraph(lineScanner.nextInt());
							//boruvka.setGraph(lineScanner.nextInt());		// creates a graph with v vertices
							//boruvka.setNumEdges(lineScanner.nextInt()); 		// number of edges
						} else if (token.equalsIgnoreCase("e")) {
							// create an edge
							int v1 = lineScanner.nextInt();
							int v2 = lineScanner.nextInt();
							int weight = lineScanner.nextInt();
							Edge edge = new Edge(v1, v2, weight);
							boruvka.getGraph().addEdge(edge);
							System.out.println(boruvka.getGraph());
						}
					}
				}
			} catch (FileNotFoundException e) {
				System.err.println("Bad file name: " + filename);
				System.exit(1);
			} catch (IOException e) {
				System.err.println("Exception in reading from file");

			}
		}

	}

}
